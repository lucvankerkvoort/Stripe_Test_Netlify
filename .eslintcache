[{"C:\\Users\\lucva\\Documents\\VSCode\\stripetestnetlify\\src\\index.js":"1","C:\\Users\\lucva\\Documents\\VSCode\\stripetestnetlify\\src\\App.js":"2","C:\\Users\\lucva\\Documents\\VSCode\\stripetestnetlify\\src\\reportWebVitals.js":"3","C:\\Users\\lucva\\Documents\\VSCode\\stripetestnetlify\\src\\Components\\CheckoutForm.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":619,"mtime":1606956907482,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":3173,"mtime":1606955992441,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"khmc31",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},"C:\\Users\\lucva\\Documents\\VSCode\\stripetestnetlify\\src\\index.js",[],["21","22"],"C:\\Users\\lucva\\Documents\\VSCode\\stripetestnetlify\\src\\App.js",[],"C:\\Users\\lucva\\Documents\\VSCode\\stripetestnetlify\\src\\reportWebVitals.js",[],"C:\\Users\\lucva\\Documents\\VSCode\\stripetestnetlify\\src\\Components\\CheckoutForm.js",["23"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  PaymentRequestButtonElement,\r\n  useStripe,\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nconst CheckoutForm = (props) => {\r\n  const history = props.history;\r\n  console.log(history);\r\n  const stripe = useStripe();\r\n  const [paymentRequest, setPaymentRequest] = useState(null);\r\n\r\n  const handlePaymentMethodReceived = async (event) => {\r\n    // Send the payment details to our function.\r\n    const paymentDetails = {\r\n      payment_method: event.paymentMethod.id,\r\n      shipping: {\r\n        name: event.shippingAddress.recipient,\r\n        phone: event.shippingAddress.phone,\r\n        address: {\r\n          line1: event.shippingAddress.addressLine[0],\r\n          city: event.shippingAddress.city,\r\n          postal_code: event.shippingAddress.postalCode,\r\n          state: event.shippingAddress.region,\r\n          country: event.shippingAddress.country,\r\n        },\r\n      },\r\n    };\r\n    const response = await fetch(\"/.netlify/functions/create-payment-intent\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ paymentDetails }),\r\n    }).then((res) => {\r\n      return res.json();\r\n    });\r\n    if (response.error) {\r\n      // Report to the browser that the payment failed.\r\n      console.log(response.error);\r\n      event.complete(\"fail\");\r\n    } else {\r\n      // Report to the browser that the confirmation was successful, prompting\r\n      // it to close the browser payment method collection interface.\r\n      event.complete(\"success\");\r\n      // Let Stripe.js handle the rest of the payment flow, including 3D Secure if needed.\r\n      const { error, paymentIntent } = await stripe.confirmCardPayment(\r\n        response.paymentIntent.client_secret\r\n      );\r\n      if (error) {\r\n        console.log(error);\r\n        return;\r\n      }\r\n      if (paymentIntent.status === \"succeeded\") {\r\n        history.push(\"/success\");\r\n      } else {\r\n        console.warn(\r\n          `Unexpected status: ${paymentIntent.status} for ${paymentIntent}`\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (stripe) {\r\n      const pr = stripe.paymentRequest({\r\n        country: \"US\",\r\n        currency: \"usd\",\r\n        total: {\r\n          label: \"Demo total\",\r\n          amount: 1350,\r\n        },\r\n        requestPayerName: true,\r\n        requestPayerEmail: true,\r\n        requestShipping: true,\r\n        shippingOptions: [\r\n          {\r\n            id: \"standard-global\",\r\n            label: \"Global shipping\",\r\n            detail: \"Arrives in 5 to 7 days\",\r\n            amount: 350,\r\n          },\r\n        ],\r\n      });\r\n      // Check the availability of the Payment Request API first.\r\n      pr.canMakePayment().then((result) => {\r\n        if (result) {\r\n          pr.on(\"paymentmethod\", handlePaymentMethodReceived);\r\n          setPaymentRequest(pr);\r\n        }\r\n      });\r\n    }\r\n  }, [stripe]);\r\n\r\n  if (paymentRequest) {\r\n    return <PaymentRequestButtonElement options={{ paymentRequest }} />;\r\n  }\r\n\r\n  // Use a traditional checkout form.\r\n  return \"Insert your form or button component here.\";\r\n};\r\n\r\nexport default CheckoutForm;\r\n",["24","25"],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":93,"column":6,"nodeType":"32","endLine":93,"endColumn":14,"suggestions":"33"},{"ruleId":"26","replacedBy":"34"},{"ruleId":"28","replacedBy":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handlePaymentMethodReceived'. Either include it or remove the dependency array.","ArrayExpression",["38"],["36"],["37"],"no-global-assign","no-unsafe-negation",{"desc":"39","fix":"40"},"Update the dependencies array to be: [handlePaymentMethodReceived, stripe]",{"range":"41","text":"42"},[2922,2930],"[handlePaymentMethodReceived, stripe]"]